version: '3.9'
x-airflow-common:
    &airflow-common
    image: apache/airflow:2.3.0
    environment:
        &airflow-common-env
        AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
        AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
        AIRFLOW__CORE__EXECUTOR: LocalExecutor
        _PIP_ADDITIONAL_REQUIREMENTS: dbt-bigquery==1.1.0
    volumes:
        - ./dags:/opt/airflow/dags
        - ./dbt:/opt/dbt
    user: "50000:0"
    depends_on:
        &airflow-common-depends-on
        airflow-postgres:
            condition: service_healthy
services:
    airflow-scheduler:
        <<: *airflow-common
        command: scheduler
        depends_on:
            <<: *airflow-common-depends-on
            airflow-init:
                condition: service_completed_successfully

    airflow-webserver:
        <<: *airflow-common
        command: webserver
        depends_on:
            <<: *airflow-common-depends-on
            airflow-init:
                condition: service_completed_successfully
        ports:
            - 8080:8080

    airflow-init:
        <<: *airflow-common
        command:
          - -c
          - |
            function ver() {
              printf "%04d%04d%04d%04d" $${1//./ }
            }
            airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
            airflow_version_comparable=$$(ver $${airflow_version})
            min_airflow_version=2.2.0
            min_airflow_version_comparable=$$(ver $${min_airflow_version})
            if (( airflow_version_comparable < min_airflow_version_comparable )); then
              echo
              echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
              echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
              echo
              exit 1
            fi
            one_meg=1048576
            mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
            cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
            disk_available=$$(df / | tail -1 | awk '{print $$4}')
            warning_resources="false"
            if (( mem_available < 4000 )) ; then
              echo
              echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
              echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
              echo
              warning_resources="true"
            fi
            if (( cpus_available < 2 )); then
              echo
              echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
              echo "At least 2 CPUs recommended. You have $${cpus_available}"
              echo
              warning_resources="true"
            fi
            if (( disk_available < one_meg * 10 )); then
              echo
              echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
              echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
              echo
              warning_resources="true"
            fi
            if [[ $${warning_resources} == "true" ]]; then
              echo
              echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
              echo "Please follow the instructions to increase amount of resources available:"
              echo "   https://airflow.apache.org/docs/apache-airflow/stable/start/docker.html#before-you-begin"
              echo
            fi
            mkdir -p /sources/logs /sources/dags /sources/plugins
            chown -R "1000:1000" /sources/{logs,dags,plugins}
            exec /entrypoint airflow version
        entrypoint: /bin/bash
        environment:
            <<: *airflow-common-env
            _AIRFLOW_DB_UPGRADE: 'true'
            _AIRFLOW_WWW_USER_CREATE: 'true'
            _AIRFLOW_WWW_USER_USERNAME: 'airflow'
            _AIRFLOW_WWW_USER_PASSWORD: 'airflow'
            _PIP_ADDITIONAL_REQUIREMENTS: ''
        user: 0:0
        volumes:
            - ./dags:/sources/dags

    airflow-postgres:
        environment:
            POSTGRES_USER: airflow
            POSTGRES_PASSWORD: airflow
            POSTGRES_DB: airflow
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "airflow"]
            interval: 5s
            retries: 5
        image: postgres:14.3-alpine
